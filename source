/*
* Author: Tyler Scotti
* Date: Feb 4, 2023
* Description: A simple Simon Says game with 3 difficulties
*
* Goals: 
* 1. Convert Simon logic to a function, then call that function in main when it wants to generate pattern. Makes code easier to read
* 2. Make it compute lowercase letters = uppercase letters. Right now it says "M" != "m"
* 3. Round counter. Round 1 outputs 1 letter. Round 2 outputs 2 letters. To the max number of letters allowed for that difficulty. Rather than it just output all characters at once.
* 4. Score is based off how many rounds the user got right, and will go to a max of 10 rounds. 
* 5. Situational userScore text based on how many rounds user got right. Ex: User got all 10 rounds right it'll say:
* Great job! You got 10 out of 10 rounds correct! You are now ready to tackle the next difficulty! 
* Rounds 8-10 will be you're ready for next level. 4-7 will be "Great Job". 0-3 will be "Almost there! Keep going!" Something like that
*/




#include <string>
#include <iostream>
#include <cmath>
#include <time.h>
#include <stdlib.h>  

void blank(int num);
std::string patterGen(int dif);

int main(){
//Variable Initialization
   std::string simonPattern;
   std::string userPattern;
   int userScore = 0;
   int i;
   std::string userIn;
   srand(time(NULL)); // Random Time for generating random pattern
   blank(100); //Makes output uniformed to the bottom of cmdline

//User input
   std::cout << "Choose Difficulty: \n";
   std::cout << "1. Easy \n2. Medium \n3. Hard \n";
   std::cout << "Type the number that corresponds with game difficulty\n";
   std::cin >> userIn;

//Logic Check for valid entry
   while((userIn != "1") && (userIn != "2") && (userIn != "3")){
      std::cout << "Oops, Simon says to just type the number that corresponds with the game difficulty you would like\n";
      std::cin >> userIn;
   }

//Logic for coming up with simon's pattern
   std::cout << "Simon says enter: \n";

   if(userIn == "1"){
   //Easy Mode pattern gen
      for(i=0; i<3; i++){
         std::string pattern[3] = {"A", "B", "C"};
         int randIndex = rand() % 3;
         simonPattern.append(pattern[randIndex]);
      }
      std::cout << simonPattern << "\n";
      _sleep(5000); //Waits 5 seconds before clearing screen

   } else if(userIn == "2"){
      //Medium mode pattern gen
      for(i=0; i<5; i++){
         std::string pattern[5] = {"A", "B", "C", "D", "E"};
         int randIndex = rand() % 5;
         simonPattern.append(pattern[randIndex]);
      }
      std::cout << simonPattern << "\n";
      _sleep(2500); //Waits 2.5 seconds before clearing screen
   } else{
      //Hard mode pattern gen
      for(i=0; i<8; i++){
         std::string pattern[8] = {"A", "B", "C", "D", "E", "F", "G", "H"};
         int randIndex = rand() % 8;
         simonPattern.append(pattern[randIndex]);
      }
      std::cout << simonPattern << "\n";
      _sleep(1000); //Waits 1 second before clearing screen
   }

//"Clears" Screen 
   blank(100);

//User's attempt at the pattern
   std::cout<<"Enter Simon's Pattern:\n";
   std::cin >> userPattern;

//Logic to test each patter
   for(i=0; i < simonPattern.size(); i++){
      if(userPattern.at(i) == simonPattern.at(i)){
         userScore += 1;
      } else {
         break;
      }
   }

  return 0;

}

//Cheeky blank cmd line clear to get rid of simon says entry. User can just scroll up and see the entry again but hopefully they don't realize and just think the screen clears.
void blank(int num){
   int i;
   for(i=0; i<num; i++){
      std::cout << ("\n");
   }
}
